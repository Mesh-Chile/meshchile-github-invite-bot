name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5.0.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint (if available)
      run: |
        if [ -f .eslintrc.js ] || [ -f .eslintrc.json ] || grep -q "eslint" package.json; then
          npm run lint
        else
          echo "‚ö†Ô∏è ESLint not configured, skipping..."
        fi
      continue-on-error: true

    - name: Check code formatting (if Prettier available)
      run: |
        if grep -q "prettier" package.json; then
          npm run format:check
        else
          echo "‚ö†Ô∏è Prettier not configured, skipping..."
        fi
      continue-on-error: true

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        GITHUB_TOKEN: fake_token_for_testing
        GITHUB_ORG: test-org
        COMMUNITY_TEAM: test-comunidad
        COLLABORATORS_TEAM: test-colaboradores
        WELCOME_REPO: test-bienvenidos
        RECAPTCHA_SECRET_KEY: test_secret
        ADMIN_KEY: test_admin_key

    - name: Generate coverage report
      run: npm run test:coverage
      if: matrix.node-version == '20.x'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5.5.0
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5.0.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start server for integration tests
      run: |
        npm start &
        sleep 5
        curl -f http://localhost:3000/api/bot/status || exit 1
      env:
        NODE_ENV: test
        PORT: 3000
        GITHUB_TOKEN: fake_token_for_testing
        GITHUB_ORG: test-org

    - name: Run integration tests
      run: |
        # Test scripts funcionan correctamente
        timeout 30s node scripts/diagnostico-bienvenidos.js || echo "Diagn√≥stico completado"
        
        # Test endpoints b√°sicos
        curl -f http://localhost:3000/api/bot/status
        curl -f http://localhost:3000/api/config

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for known vulnerabilities
      run: |
        if command -v snyk &> /dev/null; then
          snyk test --severity-threshold=medium
        else
          echo "Snyk not available, using npm audit only"
        fi
      continue-on-error: true

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6.18.0
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: meshchile-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker container
      run: |
        docker run -d --name test-container \
          -e NODE_ENV=test \
          -e GITHUB_TOKEN=fake_token \
          -e GITHUB_ORG=test-org \
          -p 3000:3000 \
          meshchile-bot:test
        
        # Esperar que inicie
        sleep 10
        
        # Test health check
        curl -f http://localhost:3000/api/bot/status || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5.0.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start server
      run: |
        npm start &
        sleep 5
      env:
        NODE_ENV: test
        GITHUB_TOKEN: fake_token_for_testing

    - name: Install Artillery (if not present)
      run: |
        if ! command -v artillery &> /dev/null; then
          npm install -g artillery@latest
        fi

    - name: Run performance tests
      run: |
        # Test b√°sico de carga
        artillery quick --count 10 --num 5 http://localhost:3000/api/bot/status
        
        # Test de rate limiting
        for i in {1..5}; do
          curl -s http://localhost:3000/api/bot/status > /dev/null
        done

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5.0.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start server
      run: |
        npm start &
        sleep 5
      env:
        NODE_ENV: test
        GITHUB_TOKEN: fake_token_for_testing

    - name: Install Pa11y
      run: npm install -g pa11y

    - name: Run accessibility tests
      run: |
        # Test p√°gina principal
        pa11y http://localhost:3000 --reporter cli
      continue-on-error: true

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test, integration, security, docker]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "üß™ Test Results Summary:"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Unit Tests: ${{ needs.test.result }}"
        echo "Integration: ${{ needs.integration.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        
        if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.integration.result }}" == "failure" ]]; then
          echo "‚ùå Critical tests failed"
          exit 1
        else
          echo "‚úÖ All critical tests passed"
        fi
