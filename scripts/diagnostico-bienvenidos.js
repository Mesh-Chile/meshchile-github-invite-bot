#!/usr/bin/env node
/**
 * Script de diagn√≥stico para el problema de creaci√≥n de issues en bienvenidos
 */
const { Octokit } = require('@octokit/rest');
const path = require('path');

// Cargar .env desde el directorio padre
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

async function diagnosticoBienvenidos() {
    console.log('üîç Diagn√≥stico del repositorio bienvenidos\n');

    const GITHUB_ORG = process.env.GITHUB_ORG || 'Mesh-Chile';
    const WELCOME_REPO = process.env.WELCOME_REPO || 'bienvenidos';

    if (!process.env.GITHUB_TOKEN) {
        console.error('‚ùå GITHUB_TOKEN no est√° configurado en .env');
        return;
    }

    const octokit = new Octokit({
        auth: process.env.GITHUB_TOKEN
    });

    console.log(`üìã Configuraci√≥n:`);
    console.log(`   ‚Ä¢ Organizaci√≥n: ${GITHUB_ORG}`);
    console.log(`   ‚Ä¢ Repositorio: ${WELCOME_REPO}`);
    console.log(`   ‚Ä¢ Token: ${process.env.GITHUB_TOKEN ? '‚úÖ Configurado' : '‚ùå No configurado'}`);
    console.log('');

    try {
        // 1. Verificar acceso al repositorio
        console.log('üì¶ 1. Verificando acceso al repositorio...');
        const { data: repo } = await octokit.rest.repos.get({
            owner: GITHUB_ORG,
            repo: WELCOME_REPO
        });
        console.log(`   ‚úÖ Repositorio existe: ${repo.full_name}`);
        console.log(`   ‚Ä¢ Privado: ${repo.private ? 'S√≠' : 'No'}`);
        console.log(`   ‚Ä¢ Issues habilitados: ${repo.has_issues ? 'S√≠' : 'No'}`);
        console.log(`   ‚Ä¢ Permisos: ${repo.permissions ? JSON.stringify(repo.permissions) : 'No disponibles'}`);

        // 2. Verificar permisos espec√≠ficos para issues
        console.log('\nüîê 2. Verificando permisos para crear issues...');
        try {
            // Intentar listar issues existentes (permiso de lectura)
            const { data: issues } = await octokit.rest.issues.listForRepo({
                owner: GITHUB_ORG,
                repo: WELCOME_REPO,
                per_page: 1
            });
            console.log(`   ‚úÖ Puede leer issues (${issues.length} issues encontrados)`);
        } catch (error) {
            console.log(`   ‚ùå No puede leer issues: ${error.message}`);
        }

        // 3. Verificar si el token es de una app o un PAT
        console.log('\nü§ñ 3. Verificando tipo de autenticaci√≥n...');
        const { data: auth } = await octokit.rest.users.getAuthenticated();
        console.log(`   ‚Ä¢ Usuario/App: ${auth.login}`);
        console.log(`   ‚Ä¢ Tipo: ${auth.type}`);
        console.log(`   ‚Ä¢ ID: ${auth.id}`);

        // 4. Verificar membres√≠a en la organizaci√≥n
        console.log('\nüë• 4. Verificando membres√≠a en la organizaci√≥n...');
        try {
            const { data: membership } = await octokit.rest.orgs.getMembershipForAuthenticatedUser({
                org: GITHUB_ORG
            });
            console.log(`   ‚úÖ Es miembro de ${GITHUB_ORG}`);
            console.log(`   ‚Ä¢ Role: ${membership.role}`);
            console.log(`   ‚Ä¢ Estado: ${membership.state}`);
        } catch (error) {
            console.log(`   ‚ùå No es miembro de ${GITHUB_ORG}: ${error.message}`);
        }

        // 5. Verificar permisos espec√≠ficos del repositorio
        console.log('\nüîë 5. Verificando permisos del repositorio...');
        try {
            const { data: collaborator } = await octokit.rest.repos.getCollaboratorPermissionLevel({
                owner: GITHUB_ORG,
                repo: WELCOME_REPO,
                username: auth.login
            });
            console.log(`   ‚úÖ Nivel de permisos: ${collaborator.permission}`);
            console.log(`   ‚Ä¢ Puede leer: ${collaborator.user.permissions?.pull || 'No disponible'}`);
            console.log(`   ‚Ä¢ Puede escribir: ${collaborator.user.permissions?.push || 'No disponible'}`);
            console.log(`   ‚Ä¢ Es admin: ${collaborator.user.permissions?.admin || 'No disponible'}`);
        } catch (error) {
            console.log(`   ‚ùå No se pudieron obtener permisos: ${error.message}`);
        }

        // 6. Intentar crear un issue de prueba
        console.log('\n‚úçÔ∏è  6. Intentando crear issue de prueba...');
        try {
            const testIssue = await octokit.rest.issues.create({
                owner: GITHUB_ORG,
                repo: WELCOME_REPO,
                title: 'üß™ Test de diagn√≥stico - Borrar este issue',
                body: 'Este es un issue de prueba creado por el script de diagn√≥stico.\n\n**Se puede borrar sin problemas.**',
                labels: ['test', 'diagnostico']
            });
            console.log(`   ‚úÖ Issue creado exitosamente: #${testIssue.data.number}`);
            console.log(`   ‚Ä¢ URL: ${testIssue.data.html_url}`);

            // Intentar cerrarlo inmediatamente
            try {
                await octokit.rest.issues.update({
                    owner: GITHUB_ORG,
                    repo: WELCOME_REPO,
                    issue_number: testIssue.data.number,
                    state: 'closed'
                });
                console.log(`   ‚úÖ Issue cerrado autom√°ticamente`);
            } catch (closeError) {
                console.log(`   ‚ö†Ô∏è  No se pudo cerrar el issue: ${closeError.message}`);
            }

        } catch (error) {
            console.log(`   ‚ùå Error creando issue: ${error.message}`);
            console.log(`   ‚Ä¢ Status: ${error.status}`);
            console.log(`   ‚Ä¢ Response: ${JSON.stringify(error.response?.data, null, 2)}`);
        }

        // 7. Verificar scopes del token
        console.log('\nüéØ 7. Verificando scopes del token...');
        try {
            // Los scopes vienen en los headers de la respuesta
            const response = await octokit.request('GET /user');
            const scopes = response.headers['x-oauth-scopes'];
            console.log(`   ‚Ä¢ Scopes disponibles: ${scopes || 'No disponibles'}`);

            const requiredScopes = ['repo', 'write:org'];
            requiredScopes.forEach(scope => {
                if (scopes && scopes.includes(scope)) {
                    console.log(`   ‚úÖ ${scope}: Disponible`);
                } else {
                    console.log(`   ‚ùå ${scope}: No disponible`);
                }
            });
        } catch (error) {
            console.log(`   ‚ö†Ô∏è  No se pudieron verificar scopes: ${error.message}`);
        }

    } catch (error) {
        console.error(`‚ùå Error en diagn√≥stico: ${error.message}`);
        console.error(`Status: ${error.status}`);
        if (error.response?.data) {
            console.error(`Response: ${JSON.stringify(error.response.data, null, 2)}`);
        }
    }

    console.log('\nüìä Resumen del diagn√≥stico completado');
}

// Ejecutar si se llama directamente
if (require.main === module) {
    diagnosticoBienvenidos()
        .catch(error => {
            console.error('‚ùå Error ejecutando diagn√≥stico:', error.message);
            process.exit(1);
        });
}

module.exports = diagnosticoBienvenidos;
